generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PriceInterval {
  HOURLY
  FOUR_HOURLY
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
}

enum AlertType {
  PRICE_THRESHOLD
  PERCENT_CHANGE
  VOLUME_SPIKE
  VOLATILITY
}

enum AlertCondition {
  ABOVE
  BELOW
  INCREASES_BY_PERCENT
  DECREASES_BY_PERCENT
}

model RarityTier {
  id          String   @id @default(cuid())
  key         String   @unique
  label       String
  rank        Int
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  skins Skin[]

  @@index([rank])
}

model ApiSource {
  id                 String   @id @default(cuid())
  name               String
  slug               String   @unique
  baseUrl            String?
  description        String?
  contactEmail       String?
  dataLicense        String?
  rateLimitPerMinute Int?
  isActive           Boolean  @default(true)
  metadata           Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  markets         Market[]
  priceSnapshots  PriceSnapshot[]
  priceSeries     PriceSeries[]
  volatilityStats VolatilityMetric[]

  @@index([isActive])
}

model Skin {
  id            String      @id @default(cuid())
  name          String
  slug          String      @unique
  description   String?
  gameTitle     String
  category      String?
  rarityTierId  String?
  tradable      Boolean     @default(true)
  releasedAt    DateTime?
  metadata      Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  rarityTier       RarityTier?     @relation(fields: [rarityTierId], references: [id], onDelete: SetNull)
  listings         SkinMarket[]
  alerts           Alert[]
  watchlistEntries WatchlistEntry[]
  investments      Investment[]

  @@index([rarityTierId])
  @@index([gameTitle])
  @@index([tradable])
}

model Market {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  region           String?
  baseCurrency     String
  timezone         String?
  description      String?
  apiSourceId      String?
  isPrimary        Boolean  @default(false)
  supportsSnapshots Boolean @default(true)
  metadata         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  apiSource   ApiSource?     @relation(fields: [apiSourceId], references: [id], onDelete: SetNull)
  listings    SkinMarket[]
  alerts      Alert[]
  investments Investment[]

  @@index([apiSourceId])
  @@index([isPrimary])
}

model SkinMarket {
  id            String   @id @default(cuid())
  skinId        String
  marketId      String
  referenceCode String?
  listingUrl    String?
  metadata      Json?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  skin   Skin   @relation(fields: [skinId], references: [id], onDelete: Cascade)
  market Market @relation(fields: [marketId], references: [id], onDelete: Cascade)

  priceSnapshots   PriceSnapshot[]
  priceSeries      PriceSeries[]
  volatilityStats  VolatilityMetric[]
  watchlistEntries WatchlistEntry[]
  alerts           Alert[]
  investments      Investment[]

  @@unique([skinId, marketId])
  @@index([marketId])
  @@index([isActive])
}

model PriceSnapshot {
  id             String   @id @default(cuid())
  skinMarketId   String
  apiSourceId    String?
  capturedAt     DateTime
  price          Decimal  @db.Decimal(18, 4)
  volume         Decimal? @db.Decimal(18, 4)
  tradeCount     Int?
  lowestListing  Decimal? @db.Decimal(18, 4)
  highestListing Decimal? @db.Decimal(18, 4)
  medianPrice    Decimal? @db.Decimal(18, 4)
  supply         Int?
  metadata       Json?
  createdAt      DateTime @default(now())

  listing SkinMarket @relation(fields: [skinMarketId], references: [id], onDelete: Cascade)
  source  ApiSource?  @relation(fields: [apiSourceId], references: [id], onDelete: SetNull)

  @@unique([skinMarketId, capturedAt])
  @@index([capturedAt])
  @@index([skinMarketId, capturedAt])
  @@index([apiSourceId])
}

model PriceSeries {
  id            String        @id @default(cuid())
  skinMarketId  String
  apiSourceId   String?
  interval      PriceInterval
  bucketStart   DateTime
  open          Decimal?     @db.Decimal(18, 4)
  close         Decimal?     @db.Decimal(18, 4)
  high          Decimal?     @db.Decimal(18, 4)
  low           Decimal?     @db.Decimal(18, 4)
  average       Decimal?     @db.Decimal(18, 4)
  volume        Decimal?     @db.Decimal(18, 4)
  tradeCount    Int?
  metadata      Json?
  createdAt     DateTime      @default(now())

  listing SkinMarket @relation(fields: [skinMarketId], references: [id], onDelete: Cascade)
  source  ApiSource?  @relation(fields: [apiSourceId], references: [id], onDelete: SetNull)

  @@unique([skinMarketId, interval, bucketStart])
  @@index([interval, bucketStart])
  @@index([apiSourceId])
}

model VolatilityMetric {
  id               String        @id @default(cuid())
  skinMarketId     String
  apiSourceId      String?
  interval         PriceInterval
  measuredAt       DateTime
  volatility       Decimal       @db.Decimal(18, 6)
  averageTrueRange Decimal?      @db.Decimal(18, 6)
  standardDeviation Decimal?     @db.Decimal(18, 6)
  confidenceScore  Decimal?      @db.Decimal(5, 4)
  windowSize       Int
  lookbackDays     Int?
  metadata         Json?
  createdAt        DateTime      @default(now())

  listing SkinMarket @relation(fields: [skinMarketId], references: [id], onDelete: Cascade)
  source  ApiSource?  @relation(fields: [apiSourceId], references: [id], onDelete: SetNull)

  @@unique([skinMarketId, interval, measuredAt])
  @@index([interval, measuredAt])
  @@index([apiSourceId])
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String?
  name           String?
  image          String?
  locale         String?
  timezone       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  savedPreferences SavedPreference[]
  alerts           Alert[]
  watchlists       Watchlist[]
  investments      Investment[]

  @@index([createdAt])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refreshToken")
  access_token      String?  @map("accessToken")
  expires_at        Int?     @map("expiresAt")
  token_type        String?  @map("tokenType")
  scope             String?
  id_token          String?  @map("idToken")
  session_state     String?  @map("sessionState")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model SavedPreference {
  id        String   @id @default(cuid())
  userId    String
  key       String
  value     Json
  scope     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@index([key])
}

model Alert {
  id             String         @id @default(cuid())
  userId         String
  skinId         String?
  skinMarketId   String?
  marketId       String?
  type           AlertType
  condition      AlertCondition
  targetValue    Decimal?       @db.Decimal(18, 4)
  changePercent  Decimal?       @db.Decimal(7, 4)
  lookbackWindow PriceInterval?
  isActive       Boolean        @default(true)
  triggeredAt    DateTime?
  expiresAt      DateTime?
  deliveryChannel String?
  metadata       Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  skin    Skin?       @relation(fields: [skinId], references: [id], onDelete: SetNull)
  listing SkinMarket? @relation(fields: [skinMarketId], references: [id], onDelete: SetNull)
  market  Market?     @relation(fields: [marketId], references: [id], onDelete: SetNull)

  @@index([userId, isActive])
  @@index([skinId])
  @@index([skinMarketId])
  @@index([marketId])
}

model Watchlist {
  id          String           @id @default(cuid())
  userId      String
  name        String
  slug        String
  description String?
  isPrimary   Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries WatchlistEntry[]

  @@unique([userId, slug])
  @@unique([userId, name])
  @@index([isPrimary])
}

model WatchlistEntry {
  id           String      @id @default(cuid())
  watchlistId  String
  skinId       String
  skinMarketId String?
  notes        String?
  position     Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  watchlist Watchlist   @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  skin      Skin        @relation(fields: [skinId], references: [id], onDelete: Cascade)
  listing   SkinMarket? @relation(fields: [skinMarketId], references: [id], onDelete: SetNull)

  @@unique([watchlistId, skinId, skinMarketId])
  @@index([skinMarketId])
}

model Investment {
  id           String   @id @default(cuid())
  userId       String
  skinId       String
  skinMarketId String?
  marketId     String?
  purchasedAt  DateTime
  quantity     Decimal  @db.Decimal(18, 4)
  averagePrice Decimal  @db.Decimal(18, 4)
  totalCost    Decimal  @db.Decimal(18, 4)
  isOpen       Boolean  @default(true)
  closedAt     DateTime?
  notes        String?
  strategyTag  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  skin    Skin        @relation(fields: [skinId], references: [id], onDelete: Cascade)
  listing SkinMarket? @relation(fields: [skinMarketId], references: [id], onDelete: SetNull)
  market  Market?     @relation(fields: [marketId], references: [id], onDelete: SetNull)

  @@index([userId, skinId])
  @@index([skinMarketId])
  @@index([marketId])
  @@index([isOpen])
}
